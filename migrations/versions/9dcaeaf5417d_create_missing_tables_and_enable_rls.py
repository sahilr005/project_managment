"""create missing tables and enable RLS

Revision ID: 9dcaeaf5417d
Revises: 53979fc6e0af
Create Date: 2025-08-15 11:01:17.200103

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9dcaeaf5417d'
down_revision: Union[str, Sequence[str], None] = '53979fc6e0af'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('projects',
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('key', sa.String(length=16), nullable=False),
    sa.Column('status', sa.String(length=16), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_projects')),
    sa.UniqueConstraint('org_id', 'key', name='uq_projects_org_key')
    )
    op.create_index('ix_projects_org_created', 'projects', ['org_id', 'created_at'], unique=False)
    op.create_table('boards',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('type', sa.String(length=16), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_boards_project_id_projects'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_boards')),
    sa.UniqueConstraint('org_id', 'project_id', 'name', name='uq_boards_proj_name')
    )
    op.create_index('ix_boards_org_proj', 'boards', ['org_id', 'project_id'], unique=False)
    op.create_table('labels',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=48), nullable=False),
    sa.Column('color', sa.String(length=16), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_labels_project_id_projects'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_labels')),
    sa.UniqueConstraint('org_id', 'project_id', 'name', name='uq_labels_proj_name')
    )
    op.create_index('ix_labels_org_proj', 'labels', ['org_id', 'project_id'], unique=False)
    op.create_table('columns',
    sa.Column('board_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], name=op.f('fk_columns_board_id_boards'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_columns')),
    sa.UniqueConstraint('org_id', 'board_id', 'name', name='uq_columns_board_name')
    )
    op.create_index('ix_columns_org_board', 'columns', ['org_id', 'board_id'], unique=False)
    op.create_index('ix_columns_org_order', 'columns', ['org_id', 'order'], unique=False)
    op.create_table('tasks',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('board_id', sa.UUID(), nullable=True),
    sa.Column('column_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=16), nullable=False),
    sa.Column('priority', sa.String(length=16), nullable=False),
    sa.Column('assignee_id', sa.UUID(), nullable=True),
    sa.Column('reporter_id', sa.UUID(), nullable=True),
    sa.Column('due_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rank', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['assignee_id'], ['users.id'], name=op.f('fk_tasks_assignee_id_users'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], name=op.f('fk_tasks_board_id_boards'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['column_id'], ['columns.id'], name=op.f('fk_tasks_column_id_columns'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_tasks_project_id_projects'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reporter_id'], ['users.id'], name=op.f('fk_tasks_reporter_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks'))
    )
    op.create_index('ix_tasks_org_assignee', 'tasks', ['org_id', 'assignee_id'], unique=False)
    op.create_index('ix_tasks_org_created', 'tasks', ['org_id', 'created_at', 'id'], unique=False)
    op.create_index('ix_tasks_org_proj_col', 'tasks', ['org_id', 'project_id', 'column_id'], unique=False)
    op.create_table('task_comments',
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_task_comments_task_id_tasks'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_task_comments_user_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_comments'))
    )
    op.create_index('ix_task_comments_org_task', 'task_comments', ['org_id', 'task_id', 'created_at'], unique=False)
    op.create_table('task_labels',
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('label_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['label_id'], ['labels.id'], name=op.f('fk_task_labels_label_id_labels'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_task_labels_task_id_tasks'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_labels')),
    sa.UniqueConstraint('org_id', 'task_id', 'label_id', name='uq_task_labels')
    )
    op.create_index('ix_task_labels_org_task', 'task_labels', ['org_id', 'task_id'], unique=False)
    
    # Enable RLS on all org-scoped tables
    for tbl in ("projects", "boards", "columns", "tasks", "task_comments", "labels", "task_labels"):
        op.execute(f"ALTER TABLE {tbl} ENABLE ROW LEVEL SECURITY;")
        op.execute(f"""
        CREATE POLICY tenant_isolation ON {tbl}
        USING (org_id::text = current_setting('app.current_org_id', true));
        """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_task_labels_org_task', table_name='task_labels')
    op.drop_table('task_labels')
    op.drop_index('ix_task_comments_org_task', table_name='task_comments')
    op.drop_table('task_comments')
    op.drop_index('ix_tasks_org_proj_col', table_name='tasks')
    op.drop_index('ix_tasks_org_created', table_name='tasks')
    op.drop_index('ix_tasks_org_assignee', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index('ix_columns_org_order', table_name='columns')
    op.drop_index('ix_columns_org_board', table_name='columns')
    op.drop_table('columns')
    op.drop_index('ix_labels_org_proj', table_name='labels')
    op.drop_table('labels')
    op.drop_index('ix_boards_org_proj', table_name='boards')
    op.drop_table('boards')
    op.drop_index('ix_projects_org_created', table_name='projects')
    op.drop_table('projects')
    
    # Disable RLS on all org-scoped tables
    for tbl in ("projects", "boards", "columns", "tasks", "task_comments", "labels", "task_labels"):
        op.execute(f"DROP POLICY IF EXISTS tenant_isolation ON {tbl};")
        op.execute(f"ALTER TABLE {tbl} DISABLE ROW LEVEL SECURITY;")
    # ### end Alembic commands ###
