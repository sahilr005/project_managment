"""notifications + webhooks

Revision ID: ce418ec8e235
Revises: 3f493593f2f3
Create Date: 2025-08-18 11:33:09.714297

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ce418ec8e235'
down_revision: Union[str, Sequence[str], None] = '3f493593f2f3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('notification_prefs',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('email_enabled', sa.Boolean(), nullable=False),
    sa.Column('push_enabled', sa.Boolean(), nullable=False),
    sa.Column('overrides', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_notification_prefs')),
    sa.UniqueConstraint('org_id', 'user_id', name='uq_notif_prefs_org_user')
    )
    op.create_table('notifications',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(length=48), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('read', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_notifications'))
    )
    op.create_index('ix_notifications_org_user_created', 'notifications', ['org_id', 'user_id', 'created_at'], unique=False)
    op.create_table('webhook_attempts',
    sa.Column('webhook_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=48), nullable=False),
    sa.Column('status_code', sa.Integer(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_webhook_attempts'))
    )
    op.create_index('ix_wh_attempts_org_hook_created', 'webhook_attempts', ['org_id', 'webhook_id', 'created_at'], unique=False)
    op.create_table('webhooks',
    sa.Column('url', sa.String(length=512), nullable=False),
    sa.Column('secret', sa.String(length=128), nullable=False),
    sa.Column('events', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_webhooks'))
    )
    op.create_index('ix_webhooks_org_active', 'webhooks', ['org_id', 'active'], unique=False)
    for tbl in ("notifications", "notification_prefs", "webhooks", "webhook_attempts"):
        op.execute(f"ALTER TABLE {tbl} ENABLE ROW LEVEL SECURITY;")
        op.execute(f"""
        CREATE POLICY tenant_isolation ON {tbl}
        USING (org_id::text = current_setting('app.current_org_id', true));
        """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_webhooks_org_active', table_name='webhooks')
    op.drop_table('webhooks')
    op.drop_index('ix_wh_attempts_org_hook_created', table_name='webhook_attempts')
    op.drop_table('webhook_attempts')
    op.drop_index('ix_notifications_org_user_created', table_name='notifications')
    op.drop_table('notifications')
    op.drop_table('notification_prefs')
    for tbl in ("notifications", "notification_prefs", "webhooks", "webhook_attempts"):
        op.execute(f"DROP POLICY IF EXISTS tenant_isolation ON {tbl};")
        op.execute(f"ALTER TABLE {tbl} DISABLE ROW LEVEL SECURITY;")
    # ### end Alembic commands ###
